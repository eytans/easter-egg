var searchIndex = JSON.parse('{\
"egg":{"doc":"<code>egg</code> (<strong>e</strong>-<strong>g</strong>raphs <strong>g</strong>ood) is a e-graph library optimized for …","t":[12,12,8,8,3,3,3,13,13,8,3,3,13,16,8,16,3,3,3,3,13,4,13,16,3,3,6,3,8,3,13,3,3,8,13,4,8,8,8,3,3,4,13,13,3,13,6,13,3,4,3,3,8,13,3,13,3,8,3,4,3,3,3,13,6,3,6,3,13,13,11,11,11,11,11,11,11,11,12,11,11,12,12,12,11,11,11,11,11,10,11,11,11,11,11,12,12,11,10,11,11,10,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,12,10,11,11,12,12,10,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,10,11,11,11,11,12,12,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,12,12,12,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,10,11,11,11,11,11,11,11,10,10,11,11,11,10,11,11,12,10,5,5,5,11,11,14,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,10,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,14,12,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,12,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,0,0,0],"n":["0","1","Analysis","Applier","AstDepth","AstSize","BackoffScheduler","BadOp","BadSexp","Condition","ConditionEqual","ConditionalApplier","Congruence","Cost","CostFunction","Data","DidMerge","Dot","EClass","EGraph","ENode","ENodeOrVar","EmptySexp","Error","Explanation","Extractor","FlatExplanation","FlatTerm","FromOp","FromOpError","HeadList","Id","Iteration","IterationData","IterationLimit","Justification","Language","LanguageChildren","LpCostFunction","LpExtractor","MultiPattern","MultiPatternParseError","NodeLimit","Other","Pattern","PatternAssignmentError","PatternAst","PatternParseError","RecExpr","RecExprParseError","Report","Rewrite","RewriteScheduler","Rule","Runner","Saturated","SearchMatches","Searcher","SimpleScheduler","StopReason","Subst","Symbol","SymbolLang","TimeLimit","TreeExplanation","TreeTerm","UnionEqualities","Var","Var","VariableError","add","add","add_expr","add_instantiation","all","all","alpha_rename","alpha_rename","analysis","any","any","applied","applier","applier","apply","apply_matches","apply_matches","apply_matches","apply_matches","apply_one","apply_one","apply_one","apply_one","apply_rewrite","apply_rewrite","apply_time","apply_time","are_explanations_enabled","as_mut_slice","as_mut_slice","as_ref","as_slice","as_slice","as_str","assert_unique_leaves","ast","ast","backward_rule","backward_rule","bitor","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build_recexpr","build_recexpr","can_be_length","can_be_length","can_stop","can_stop","can_stop","check","check","check_goals","check_proof","child_proofs","children","children","children","children","children","children_mut","children_mut","children_mut","classes","classes_mut","clean","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cmp","condition","config","copy_without_unions","cost","cost","cost","cost_rec","cost_rec","data","data","default","default","default","default","default","default","define_language","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","do_not_ban","dot","dump","eclass","egraph","egraph_classes","egraph_classes","egraph_intersect","egraph_nodes","egraph_nodes","egraph_union","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivs","explain_equivalence","explain_equivalence","explain_existance","explain_existance","explain_existance_pattern","explain_existance_pattern","explain_matches","explain_matches","explanation_trees","find","find_best","find_best_cost","find_best_node","flatten_explanation","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fold","fold","for_each","for_each","for_each_mut","for_each_mut","forward_rule","forward_rule","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_op","from_op","from_op","from_str","from_str","from_str","from_str","from_str","from_vec","from_vec","get","get_explanation_num_nodes","get_flat_string","get_flat_strings","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_initial_flat_term","get_last_flat_term","get_num_congr","get_pattern_ast","get_pattern_ast","get_pattern_ast","get_pattern_ast","get_pattern_ast","get_pattern_ast","get_pattern_ast","get_recexpr","get_string","get_string","get_string_with_let","get_tree_size","get_union_equalities","has_rewrite_backward","has_rewrite_forward","hash","hash","hash","hash","hash","hash","hash","hash","hook_time","hooks","id","id_to_expr","id_to_pattern","index","index","index","index_mut","index_mut","insert","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_dag","is_empty","is_empty","is_empty","is_empty","is_leaf","is_leaf","iter","iterations","iterations","join_recexprs","join_recexprs","leaf","leaves","len","len","len","len","len","lookup","lookup_expr","lookup_expr_ids","make","make","make_flat_explanation","map_children","map_children","matches","matches","matches","memo_size","merge","merge_max","merge_min","merge_option","modify","modify","multi_rewrite","n_matches","n_matches","n_rebuilds","name","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","new","new","new","new","new","new","new","new","new","new","new","new","new","new","node","node","node_cost","node_cost","nodes","number_of_classes","op","parents","parse","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","pre_union","pre_union","pretty","pretty","print_report","rebuild","rebuild_time","rebuild_time","rebuilds","remove_rewrites","report","rewrite","rewrite","roots","rule_ban_length","rule_match_limit","run","run","run_dot","search","search","search","search_eclass","search_eclass","search_eclass_with_limit","search_eclass_with_limit","search_eclass_with_limit","search_rewrite","search_rewrite","search_rewrite","search_time","search_time","search_with_limit","search_with_limit","search_with_limit","search_with_limit","searcher","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","set_analysis_data","solve","solve_multiple","source","source","stop_reason","stop_reason","stop_reason","substs","test_fn","timeout","to_dot","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_pdf","to_png","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_svg","total_number_of_nodes","total_size","total_time","total_time","try_build_recexpr","try_build_recexpr","try_for_each","try_for_each","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","tutorials","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","union_instantiations","union_trusted","update_children","update_children","use_anchors","vars","vars","vars","vars","vars","vars","vars","vars","vars","vars","vars","vars","with_anchors","with_ban_length","with_capacity","with_config_line","with_egraph","with_explanation_length_optimization","with_explanation_length_optimization","with_explanations_disabled","with_explanations_disabled","with_explanations_enabled","with_explanations_enabled","with_expr","with_hook","with_initial_match_limit","with_iter_limit","with_node_limit","with_scheduler","with_time_limit","without_explanation_length_optimization","without_explanation_length_optimization","0","0","0","0","0","0","0","0","0","0","0","0","0","_01_background","_02_getting_started","_03_explanations"],"q":["eggegg::ENodeOrVar","","egg::Justification","egg::MultiPatternParseError","","","egg::RecExprParseError","","","egg::StopReason","","","","egg::tutorials","",""],"d":["","","Arbitrary data associated with an <code>EClass</code>.","The righthand side of a <code>Rewrite</code>.","A simple <code>CostFunction</code> that counts maximum AST depth.","A simple <code>CostFunction</code> that counts total AST size.","A <code>RewriteScheduler</code> that implements exponentional rule …","Attempting to parse an operator into a value of type <code>L</code> …","An error occurred while parsing the s-expression itself, …","A condition to check in a <code>ConditionalApplier</code>.","A <code>Condition</code> that checks if two terms are equivalent.","An <code>Applier</code> that checks a <code>Condition</code> before applying.","Justification by congruence.","The <code>Cost</code> type. It only requires <code>PartialOrd</code> so you can use …","A cost function that can be used by an <code>Extractor</code>.","The per-<code>EClass</code> data for this analysis.","Result of <code>Analysis::merge</code> indicating which of the inputs …","A wrapper for an <code>EGraph</code> that can output GraphViz for …","An equivalence class of enodes.","A data structure to keep track of equalities between …","An enode from the underlying <code>Language</code>","The language of <code>Pattern</code>s.","An empty s-expression was found. Usually this is caused by …","The error type returned by <code>from_op</code> if its arguments do not …","A data structure representing an explanation that two …","Extracting a single <code>RecExpr</code> from an <code>EGraph</code>.","FlatExplanation are the simpler, expanded representation …","A single term in an flattened explanation. After the first …","A trait for parsing e-nodes. This is implemented …","A generic error for failing to parse an operator. This is …","A list was found where an operator was expected. This is …","A key to identify <code>EClass</code>es within an <code>EGraph</code>.","Data generated by running a <code>Runner</code> one iteration.","Custom data to inject into the <code>Iteration</code>s recorded by a …","The iteration limit was hit. The data is the iteration …","A justification for a union, either via a rule or …","Trait that defines a Language whose terms will be in the …","A marker that defines acceptable children types for …","A cost function to be used by an <code>LpExtractor</code>.","A structure to perform extraction using integer linear …","A set of open expressions bound to variables.","An error raised when parsing a <code>MultiPattern</code>","The enode limit was hit. The data is the enode limit.","Some other reason to stop.","A pattern that can function as either a <code>Searcher</code> or <code>Applier</code>…","One of the clauses in the multipattern wasn’t of the …","A <code>RecExpr</code> that represents a <code>Pattern</code>.","One of the patterns in the multipattern failed to parse.","A recursive expression from a user-defined <code>Language</code>.","An error type for failures when attempting to parse an …","A report containing data about an entire <code>Runner</code> run.","A rewrite that searches for the lefthand side and applies …","A way to customize how a <code>Runner</code> runs <code>Rewrite</code>s.","Justification by a rule with this name.","Faciliates running rewrites over an <code>EGraph</code>.","The egraph saturated, i.e., there was an iteration where we","The result of searching a <code>Searcher</code> over one eclass.","The lefthand side of a <code>Rewrite</code>.","A very simple <code>RewriteScheduler</code> that runs every rewrite …","Error returned by <code>Runner</code> when it stops.","A substitution mapping <code>Var</code>s to eclass <code>Id</code>s.","An interned string.","A simple language used for testing.","The time limit was hit. The data is the time limit in …","Explanation trees are the compact representation showing …","An explanation for a term and its equivalent children. …","A vector of equalities based on enode ids. Each entry …","A variable for use in <code>Pattern</code>s or <code>Subst</code>s.","A pattern variable","One of the variables failed to parse.","Adds an enode to the <code>EGraph</code>.","Adds a given enode to this <code>RecExpr</code>. The enode’s children …","Adds a <code>RecExpr</code> to the <code>EGraph</code>, returning the id of the …","Adds a <code>Pattern</code> and a substitution to the <code>EGraph</code>, returning …","Returns true if the predicate is true on all children. …","Returns true if the predicate is true on all children. …","Returns a new <code>PatternAst</code> with the variables renames …","Returns a new <code>PatternAst</code> with the variables renames …","The <code>Analysis</code> given when creating this <code>EGraph</code>.","Returns true if the predicate is true on any children. …","Returns true if the predicate is true on any children. …","A map from rule name to number of times it was <em>newly</em> …","The applier (right-hand side) of the rewrite.","The inner <code>Applier</code> to call once <code>condition</code> passes.","Call <code>apply_matches</code> on the <code>Applier</code>.","Apply many substitutions.","Apply many substitutions.","","","Apply a single substitution.","","","","A hook allowing you to customize rewrite application …","A hook allowing you to customize rewrite application …","","Seconds spent applying rules in this iteration.","Check if explanations are enabled.","Returns a mutable slice of the children <code>Id</code>s.","","","Returns a slice of the children <code>Id</code>s.","","Convert this symbol into the string in the static, global …","Asserts that the childless enodes in this eclass are …","The actual pattern as a <code>RecExpr</code>","Optionally, an ast for the matches used in proof …","A rule rewriting this TreeTerm’s initial term back to …","A rule rewriting this FlatTerm back to the last FlatTerm.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Build a <code>RecExpr</code> from an e-node.","Build a <code>RecExpr</code> from an e-node.","Checks if n is an acceptable number of children for this …","","Whether or not the <code>Runner</code> is allowed to say it has …","Whether or not the <code>Runner</code> is allowed to say it has …","","Check a condition.","","Panic if the given eclass doesn’t contain the given …","Check the validity of the explanation with respect to the …","A list of child proofs, each transforming the initial term …","Returns the children of this e-node.","","","The children of this FlatTerm.","The enode’s children <code>Id</code>s","Returns a mutable slice of the children of this e-node.","","","Returns an iterator over the eclasses in the egraph.","Returns an mutating iterator over the eclasses in the …","Whether or not reading operation are allowed on this …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The <code>Condition</code> to <code>check</code> before calling <code>apply_one</code> on <code>applier</code>.","A list of strings to be output top part of the dot file.","Make a copy of the egraph with the same nodes, but no …","Calculates the cost of an enode whose children are <code>Cost</code>s.","","","Calculates the total cost of a <code>RecExpr</code>.","Calculates the total cost of a <code>RecExpr</code>.","The analysis data associated with this eclass.","The user provided annotation for this iteration","","","","","","","A macro to easily create a <code>Language</code>.","","","","","","","Never ban a particular rule.","Creates a <code>Dot</code> to visualize this egraph. See <code>Dot</code>.","Returns a more debug-able representation of the egraph.","The eclass id that these matches were found in.","The <code>EGraph</code> used.","","The number of eclasses in the egraph at the start of this …","A intersection algorithm between two egraphs. The …","","The number of enodes in the egraph at the start of this …","Performs the union between two egraphs.","","","","","","","","","","","","","","","","","","","","","","","Checks whether two <code>RecExpr</code>s are equivalent. Returns a list …","Calls <code>EGraph::explain_equivalence</code>.","When explanations are enabled, this function produces an …","Calls <code>EGraph::explain_existance</code>.","When explanations are enabled, this function produces an …","Calls EGraph::explain_existance_pattern`.","Return an <code>Explanation</code> for why a pattern appears in the …","Get an explanation for why an expression matches a pattern.","Get an explanation for why an expression matches a pattern.","The tree representation of the explanation.","Canonicalizes an eclass id.","Find the cheapest (lowest cost) represented <code>RecExpr</code> in the …","Find the cost of the term that would be extracted from …","Find the cheapest e-node in the given e-class.","Construct the <code>FlatExplanation</code> for this TreeTerm.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Folds over the children, given an initial accumulator.","Folds over the children, given an initial accumulator.","Runs a given function on each child <code>Id</code>.","Runs a given function on each child <code>Id</code>.","Runs a given function on each child <code>Id</code>, allowing mutation …","Runs a given function on each child <code>Id</code>, allowing mutation …","A rule rewriting the last TreeTerm’s final term to this …","A rule rewriting the last FlatTerm to this FlatTerm.","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Parse an e-node with operator <code>op</code> and children <code>children</code>.","","","","","","","","Create an instance of this type from a <code>Vec&lt;Id&gt;</code>, with the …","","Retrieve a <code>Var</code>, returning <code>None</code> if not present.","Get the number of nodes in the egraph used for …","Get each flattened term in the explanation as an …","Get each term in the explanation as a string. See …","","","","","","","","","Get a FlatTerm representing the first term in this proof.","Get a FlatTerm representing the final term in this proof.","Get the number of congruences between nodes in the egraph. …","For patterns, return the ast directly as a reference","For patterns, return the ast directly as a reference","For patterns, get the ast directly as a reference.","For patterns, get the ast directly as a reference.","","","","Convert this FlatTerm to a RecExpr.","Get each the tree-style explanation as an s-expression …","Convert this FlatTerm to an S-expression. See …","Get the tree-style explanation as an s-expression string …","Get the size of this explanation tree in terms of the …","Get all the unions ever found in the egraph in terms of …","Checks if this term or any child has a <code>backward_rule</code>.","Checks if this term or any child has a <code>forward_rule</code>.","","","","","","","","","Seconds spent running hooks.","The hooks added by the <code>with_hook</code> method, in insertion …","This eclass’s id.","Pick a representative term for a given Id.","Like <code>id_to_expr</code>, but creates a pattern instead of a term. …","","","","","","Insert something, returning the old <code>Id</code> if present.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Checks if this expr is a DAG, i.e. doesn’t have any back …","Checks if there are no children.","Checks if there are no children.","Returns <code>true</code> if the <code>eclass</code> is empty.","Returns <code>true</code> if the egraph is empty","Returns true if this enode has no children.","Returns true if this enode has no children.","Iterates over the enodes in this eclass.","Data accumulated over each <code>Iteration</code>.","The number of iterations this runner performed.","Make a <code>RecExpr</code> by mapping this enodes children to other …","Make a <code>RecExpr</code> by mapping this enodes children to other …","Create childless enode with the given string","Iterates over the childless enodes in this eclass.","Returns the number of children.","Returns the number of the children this enode has.","Returns the number of the children this enode has.","Returns the number of enodes in this eclass.","","Lookup the eclass of the given enode.","Lookup the eclass of the given <code>RecExpr</code>.","Lookup the eclasses of all the nodes in the given <code>RecExpr</code>.","Makes a new <code>Analysis</code> for a given enode <code>Analysis</code>.","Given the current <code>Runner</code>, make the data to be put in this …","Construct the flat representation of the explanation and …","Creates a new enode with children determined by the given …","Creates a new enode with children determined by the given …","Returns true if this enode matches another enode. This …","","","","Defines how to merge two <code>Data</code>s when their containing <code>EClass</code>…","A utility for implementing <code>Analysis::merge</code> when the <code>Data</code> …","A utility for implementing <code>Analysis::merge</code> when the <code>Data</code> …","A utility for implementing <code>Analysis::merge</code> when the <code>Data</code> …","A hook that allows the modification of the <code>EGraph</code>.","A hook that allows the modification of the <code>EGraph</code>.","A macro to easily make <code>Rewrite</code>s using <code>MultiPattern</code>s.","Returns the number of matches in the e-graph","Returns the number of matches in the e-graph","The number of rebuild iterations done after this iteration …","The name of the rewrite.","","","","","","","","","","","Intern a string into the global symbol table.","Construct a new explanation given its tree representation.","Create an <code>LpExtractor</code> using costs from the given …","Create a new <code>Runner</code> with the given analysis and default …","Creates a new, empty <code>EGraph</code> with the given <code>Analysis</code>","Construct a new TreeTerm given its node and child_proofs.","Construct a new FlatTerm given a node and its children.","Create a new <code>Extractor</code> given an <code>EGraph</code> and a <code>CostFunction</code>.","Create a new <code>FromOpError</code> representing a failed call …","Create an enode with the given string and children","Creates a new multipattern, binding the given patterns to …","Creates a new pattern from the given pattern ast.","Create a new <code>Rewrite</code>. You typically want to use the …","Create a new <code>ConditionEqual</code> condition given two patterns.","A node representing this TreeTerm’s operator. The …","The node representing this FlatTerm’s operator. The …","Returns the cost of the given e-node.","","The equivalent enodes in this equivalence class.","Returns the number of eclasses in the egraph.","The operator for an enode","Iterates over the parent enodes of this eclass.","Create a ConditionEqual by parsing two pattern strings.","","","","","","","","An optional hook that allows inspection before a <code>union</code> …","An optional hook that allows inspection before a <code>union</code> …","Pretty print with a maximum line length.","Pretty print this pattern as a sexp with the given width","Prints some information about a runners run.","Restores the egraph invariants of congruence and enode …","","Seconds spent <code>rebuild</code>ing the egraph in this iteration.","","Remove the rewrite annotation from this flatterm, if any.","Creates a <code>Report</code> summarizing this <code>Runner</code>s run.","Rewrite the FlatTerm by matching the lhs and substituting …","A macro to easily make <code>Rewrite</code>s.","The roots of expressions added by the <code>with_expr</code> method, in …","Set the initial ban length for a rule.","Set the initial match limit for a rule.","Invokes some program with the given arguments, piping this …","Run this <code>Runner</code> until it stops. After this, the field …","Invokes <code>dot</code> with the given arguments, piping this formatted","Search the whole <code>EGraph</code>, returning a list of all the …","Search the whole <code>EGraph</code>, returning a list of all the …","Call <code>search</code> on the <code>Searcher</code>.","Search one eclass, returning None if no matches can be …","Search one eclass, returning None if no matches can be …","Similar to <code>search_eclass</code>, but return at most <code>limit</code> many …","","","A hook allowing you to customize rewrite searching …","A hook allowing you to customize rewrite searching …","","","Seconds spent searching in this iteration.","Similar to <code>search</code>, but return at most <code>limit</code> many matches.","Similar to <code>search</code>, but return at most <code>limit</code> many matches.","","Call <code>search_with_limit</code> on the <code>Searcher</code>.","The searcher (left-hand side) of the rewrite.","","","","","","","","","","","Update the analysis data of an e-class.","Extract a single rooted term.","Extract (potentially multiple) roots","","","Why the <code>Runner</code> stopped. This will be <code>None</code> if it hasn’t …","","If the runner stopped on this iterations, this is the …","The substitutions for each match.","Utility to make a test proving expressions equivalent","Set the cbc timeout in seconds.","Writes the <code>Dot</code> to a .dot file with the given filename. …","","","","","","","","","","","","","","","","","","","","Renders the <code>Dot</code> to a .pdf file with the given filename. …","Renders the <code>Dot</code> to a .png file with the given filename. …","","","","","","","","","","","","","","","","Renders the <code>Dot</code> to a .svg file with the given filename. …","Iterates over the classes, returning the total number of …","Returns the number of enodes in the <code>EGraph</code>.","","Total time spent in this iteration, including data …","Same as <code>Language::build_recexpr</code>, but fallible.","Same as <code>Language::build_recexpr</code>, but fallible.","Runs a falliable function on each child, stopping if the …","Runs a falliable function on each child, stopping if the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A Guide-level Explanation of <code>egg</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Unions two eclasses given their ids.","Given two patterns and a substitution, add the patterns …","Unions two e-classes, using a given reason to justify it.","Runs a given function to replace the children.","Runs a given function to replace the children.","Whether or not to anchor the edges in the output. True by …","Returns a list of the variables bound by this Searcher","Returns a list of variables that this Applier assumes are …","Returns a list of variables that this Applier assumes are …","Returns a list of variables that this Condition assumes …","Returns a list of variables that this Condition assumes …","","","Returns a list of the <code>Var</code>s in this pattern.","","","","","Set whether or not to anchor the edges in the output.","Set the initial ban length. Default: 5 iterations","Create a <code>Subst</code> with the given initial capacity","Adds a line to the dot output. Indentation and a newline …","Replace the <code>EGraph</code> of this <code>Runner</code>.","By default, egg runs a greedy algorithm to reduce the size …","By default, egg runs a greedy algorithm to reduce the size …","Disable explanations for this runner’s egraph.","Disable explanations for this <code>EGraph</code>.","Enable explanations for this runner’s egraph. This …","Enable explanations for this <code>EGraph</code>. This allows the …","Add an expression to the egraph to be run.","Add a hook to instrument or modify the behavior of a <code>Runner</code>…","Set the initial match limit after which a rule will be …","Sets the iteration limit. Default: 30","Sets the egraph size limit (in enodes). Default: 10,000","Change out the <code>RewriteScheduler</code> used by this <code>Runner</code>. The …","Sets the runner time limit. Default: 5 seconds","By default, egg runs a greedy algorithm to reduce the size …","By default, egg runs a greedy algorithm to reduce the size …","","","","","","","","","","","","","","Concepts: e-graphs and equality saturation","My first <code>egg</code> 🐣","Explanations"],"i":[1,1,0,0,0,0,0,2,2,0,0,0,3,4,0,5,0,0,0,0,6,0,2,7,0,0,0,0,0,0,2,0,0,0,8,0,0,0,0,0,0,0,8,8,0,9,0,9,0,0,0,0,0,3,0,8,0,0,0,0,0,0,0,8,0,0,0,0,6,9,10,11,10,10,12,12,13,11,10,12,12,14,15,16,15,17,17,18,19,17,18,19,16,20,20,21,14,10,22,23,11,22,23,24,25,19,26,27,28,1,29,24,30,1,31,32,25,10,3,27,28,33,34,35,36,11,2,37,18,9,19,6,26,15,16,38,8,21,14,39,40,41,42,23,29,24,30,1,31,32,25,10,3,27,28,33,34,35,36,11,2,37,18,9,19,6,26,15,16,38,8,21,14,39,40,41,42,23,12,12,22,23,20,20,40,43,38,10,30,27,12,37,6,28,37,12,37,6,10,10,10,24,25,10,3,27,28,11,37,18,19,6,15,16,8,21,14,41,42,23,24,25,10,3,27,28,11,37,18,19,6,15,16,8,21,14,41,42,23,24,11,37,6,41,42,23,16,29,10,4,34,35,4,4,25,14,32,10,11,40,42,23,0,24,25,10,3,37,23,40,10,10,26,32,21,14,10,21,14,10,24,3,28,11,37,18,19,6,41,42,23,24,3,28,11,37,18,19,6,41,42,23,10,32,10,32,10,32,10,32,10,30,10,33,33,33,27,29,29,24,24,30,32,25,10,3,27,27,28,28,33,34,35,36,36,11,11,2,2,37,37,18,9,9,19,19,6,6,26,15,16,38,8,21,21,14,39,40,41,41,42,23,23,12,12,12,12,12,12,27,28,29,24,24,24,24,30,1,31,32,25,10,3,27,28,33,34,35,36,11,11,2,37,18,9,19,19,19,19,6,26,15,16,38,8,21,14,39,40,41,42,23,23,7,37,6,24,11,18,19,41,22,23,42,10,30,30,24,3,11,37,6,41,42,23,27,27,10,44,44,17,17,19,19,16,28,30,28,30,30,10,28,28,24,3,11,37,6,41,42,23,14,32,25,10,10,10,11,42,10,11,42,29,24,30,1,31,32,25,10,3,27,28,33,34,35,36,11,2,37,18,9,19,6,26,15,16,38,8,21,14,39,40,41,42,23,11,22,22,25,10,12,12,25,32,21,12,12,37,25,22,12,12,25,23,10,10,10,5,45,30,12,12,12,37,6,21,5,0,0,0,5,5,0,44,44,14,15,24,3,11,37,18,19,6,41,42,23,24,30,31,32,10,27,28,33,36,37,18,19,15,38,27,28,46,34,25,10,37,25,38,24,11,37,6,41,42,23,5,5,11,19,32,10,21,14,21,28,32,28,0,32,40,40,29,32,29,44,44,15,44,44,44,18,19,20,20,40,21,14,44,44,19,15,15,24,25,10,3,11,37,8,21,14,23,10,31,31,2,9,32,21,14,26,0,31,29,24,25,10,3,27,28,11,37,18,19,6,15,16,8,21,14,41,42,23,29,29,29,24,30,27,28,36,11,2,37,9,19,6,21,41,23,29,10,10,21,14,12,12,12,12,29,24,30,1,31,32,25,10,3,27,28,33,34,35,36,11,11,2,37,18,9,19,6,26,15,16,38,8,21,14,39,40,41,42,23,29,24,30,1,31,32,25,10,3,27,28,33,34,35,36,11,2,37,18,9,19,6,26,15,16,38,8,21,14,39,40,41,42,23,0,29,24,30,1,31,32,25,10,3,27,28,33,34,35,36,11,2,37,18,9,19,6,26,15,16,38,8,21,14,39,40,41,42,23,10,10,10,12,12,29,44,17,17,43,43,18,18,19,19,19,16,38,29,40,42,29,32,32,10,32,10,32,10,32,32,40,32,32,32,32,32,10,47,48,49,50,51,52,53,54,55,56,57,58,59,0,0,0],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["id",3]],[[["",0]],["id",3]],[[["",0],["recexpr",3]],["id",3]],[[["",0],["patternast",6],["subst",3]],["id",3]],[[["",0],["fnmut",8]],["bool",0]],[[["",0],["fnmut",8]],["bool",0]],[[["",0]]],[[["",0]]],null,[[["",0],["fnmut",8]],["bool",0]],[[["",0],["fnmut",8]],["bool",0]],null,null,null,[[["",0],["egraph",3]],["vec",3,[["id",3]]]],[[["",0],["egraph",3],["symbol",3]],["vec",3,[["id",3]]]],[[["",0],["egraph",3],["symbol",3]],["vec",3,[["id",3]]]],[[["",0],["egraph",3],["symbol",3]],["vec",3,[["id",3]]]],[[["",0],["egraph",3],["symbol",3]],["vec",3,[["id",3]]]],[[["",0],["egraph",3],["id",3],["subst",3],["option",4,[["patternast",6]]],["symbol",3]],["vec",3,[["id",3]]]],[[["",0],["egraph",3],["id",3],["subst",3],["option",4,[["patternast",6]]],["symbol",3]],["vec",3,[["id",3]]]],[[["",0],["egraph",3],["id",3],["subst",3],["option",4,[["patternast",6]]],["symbol",3]],["vec",3,[["id",3]]]],[[["",0],["egraph",3],["id",3],["subst",3],["option",4,[["patternast",6]]],["symbol",3]],["vec",3,[["id",3]]]],[[["",0],["usize",0],["egraph",3],["rewrite",3],["vec",3,[["searchmatches",3]]]],["usize",0]],[[["",0],["usize",0],["egraph",3],["rewrite",3],["vec",3,[["searchmatches",3]]]],["usize",0]],null,null,[[["",0]],["bool",0]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["str",0]],[[["",0]]],null,null,null,nullrecexpr",3]],[[["",0]],["recexpr",3]],[[["usize",0]],["bool",0]],[[["usize",0]],["bool",0]],[[["",0],["usize",0]],["bool",0]],[[["",0],["usize",0]],["bool",0]],[[["",0],["usize",0]],["bool",0]],[[["",0],["egraph",3],["id",3],["subst",3]],["bool",0]],[[["",0],["egraph",3],["id",3],["subst",3]],["bool",0]],[[["",0],["id",3]]],[[["",0]]],null,[[["",0]]],[[["",0]]],[[["",0]]],null,null,[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],null,[[["",0]],["globalsymbol",3]],[[["",0]],["eclass",3]],[[["",0]],["egraph",3]],[[["",0]],["justification",4]],[[["",0]],["treeterm",3]],[[["",0]],["flatterm",3]],[[["",0]],["recexpr",3]],[[["",0]],["symbollang",3]],[[["",0]],["multipattern",3]],[[["",0]],["pattern",3]],[[["",0]],["enodeorvar",4]],[[["",0]],["rewrite",3]],[[["",0]],["conditionalapplier",3]],[[["",0]],["stopreason",4]],[[["",0]],["report",3]],[[["",0]],["iteration",3]],[[["",0]],["var",3]],[[["",0]],["subst",3]],[[["",0]],["id",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["globalsymbol",3]],["ordering",4]],[[["",0],["recexpr",3]],["ordering",4]],[[["",0],["symbollang",3]],["ordering",4]],[[["",0],["enodeorvar",4]],["ordering",4]],[[["",0],["var",3]],["ordering",4]],[[["",0],["subst",3]],["ordering",4]],[[["",0],["id",3]],["ordering",4]],null,null,[[["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["recexpr",3]]],[[["",0],["recexpr",3]]],null,null,[[]],[[]],[[]],[[]],[[],["subst",3]],[[],["id",3]],null,[[],["result",4,[["globalsymbol",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[["",0]],["dot",3]],[[["",0]]],null,null,null,null,[[["",0],["egraph",3]],["egraph",3]],null,null,[[["",0],["egraph",3]]],[[["",0],["globalsymbol",3]],["bool",0]],[[["",0],["justification",4]],["bool",0]],[[["",0],["flatterm",3]],["bool",0]],[[["",0],["recexpr",3]],["bool",0]],[[["",0],["symbollang",3]],["bool",0]],[[["",0],["multipattern",3]],["bool",0]],[[["",0],["pattern",3]],["bool",0]],[[["",0],["enodeorvar",4]],["bool",0]],[[["",0],["var",3]],["bool",0]],[[["",0],["subst",3]],["bool",0]],[[["",0],["id",3]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["recexpr",3],["recexpr",3]],["vec",3,[["id",3]]]],[[["",0],["recexpr",3],["recexpr",3]],["explanation",3]],[[["",0],["recexpr",3],["recexpr",3]],["explanation",3]],[[["",0],["recexpr",3]],["explanation",3]],[[["",0],["recexpr",3]],["explanation",3]],[[["",0],["patternast",6],["subst",3]],["explanation",3]],[[["",0],["patternast",6],["subst",3]],["explanation",3]],[[["",0],["recexpr",3],["patternast",6],["subst",3]],["explanation",3]],[[["",0],["recexpr",3],["patternast",6],["subst",3]],["explanation",3]],null,[[["",0],["id",3]],["id",3]],[[["",0],["id",3]]],[[["",0],["id",3]]],[[["",0],["id",3]],["",0]],[[["",0]],["flatexplanation",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0]]],[[["",0]]],[[["",0],["fnmut",8]]],[[["",0],["fnmut",8]]],[[["",0],["fnmut",8]]],[[["",0],["fnmut",8]]],null,null,[[]],[[["string",3]],["globalsymbol",3]],[[["string",3]],["globalsymbol",3]],[[["str",0]],["globalsymbol",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["vec",3]]],[[]],[[]],[[]],[[]],[[["recexpr",3]]],[[]],[[]],[[["patternast",6]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",0]],["id",3]],[[["str",0],["vec",3,[["id",3]]]],["result",4]],[[["str",0],["vec",3,[["id",3]]]],["result",4]],[[["str",0],["vec",3,[["id",3]]]],["result",4]],[[["str",0]],["result",4,[["globalsymbol",3]]]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["vec",3,[["id",3]]]]],[[["vec",3,[["id",3]]]]],[[["",0],["var",3]],["option",4,[["id",3]]]],[[["",0]],["usize",0]],[[["",0]],["string",3]],[[["",0]],["vec",3,[["string",3]]]],[[["",0],["",0]],["u64",0]],[[["",0],["",0]],["u64",0]],[[["",0],["",0]],["u64",0]],[[["",0],["",0]],["u64",0]],[[["",0],["",0]],["u64",0]],[[["",0],["",0]],["u64",0]],[[["",0],["",0]],["u64",0]],[[["",0],["",0]],["u64",0]],[[["",0]],["flatterm",3]],[[["",0]],["flatterm",3]],[[["",0]],["usize",0]],[[["",0]],["option",4,[["patternast",6]]]],[[["",0]],["option",4,[["patternast",6]]]],[[["",0]],["option",4,[["patternast",6]]]],[[["",0]],["option",4,[["patternast",6]]]],[[["",0]],["option",4,[["patternast",6]]]],[[["",0]],["option",4,[["patternast",6]]]],[[["",0]],["option",4,[["patternast",6]]]],[[["",0]],["recexpr",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["usize",0]],[[["",0]],["unionequalities",6]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],null,null,null,[[["",0],["id",3]],["recexpr",3]],[[["",0],["id",3],["indexmap",3]]],[[["",0],["id",3]]],[[["",0],["id",3]],["",0]],[[["",0],["var",3]]],[[["",0],["id",3]]],[[["",0],["id",3]],["",0]],[[["",0],["var",3],["id",3]],["option",4,[["id",3]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]]],null,null,[[["",0]],["recexpr",3]],[[["",0]],["recexpr",3]],[[]],[[["",0]]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["option",4,[["id",3]]]],[[["",0],["recexpr",3]],["option",4,[["id",3]]]],[[["",0],["recexpr",3]],["option",4,[["vec",3,[["id",3]]]]]],[[["egraph",3],["",0]]],[[["runner",3]]],[[["",0]],["flatexplanation",6]],[[["fnmut",8]]],[[["fnmut",8]]],[[["",0],["",0]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["",0]],["bool",0]],null,[[["",0]],["didmerge",3]],[[["",0],["ord",8]],["didmerge",3]],[[["",0],["ord",8]],["didmerge",3]],[[["option",4],["option",4]],["didmerge",3]],[[["egraph",3],["id",3]]],[[["egraph",3],["id",3]]],null,[[["",0],["egraph",3]],["usize",0]],[[["",0],["egraph",3]],["usize",0]],null,null,[[["",0],["globalsymbol",3]],["bool",0]],[[["",0],["justification",4]],["bool",0]],[[["",0],["recexpr",3]],["bool",0]],[[["",0],["symbollang",3]],["bool",0]],[[["",0],["multipattern",3]],["bool",0]],[[["",0],["pattern",3]],["bool",0]],[[["",0],["enodeorvar",4]],["bool",0]],[[["",0],["var",3]],["bool",0]],[[["",0],["subst",3]],["bool",0]],[[["",0],["id",3]],["bool",0]],[[],["globalsymbol",3]],[[["treeexplanation",6]],["explanation",3]],[[["egraph",3]]],[[]],[[]],[[["vec",3,[["treeexplanation",6]]]],["treeterm",3]],[[["flatexplanation",6]],["flatterm",3]],[[["egraph",3]]],[[["str",0],["vec",3,[["id",3]]]]],[[["vec",3,[["id",3]]]]],[[["vec",3]]],[[["patternast",6]]],[[],["result",4,[["string",3]]]],[[["pattern",3],["pattern",3]]],null,null,[[["",0],["egraph",3],["id",3],["",0]],["f64",0]],[[["",0],["egraph",3],["id",3],["",0]],["f64",0]],null,[[["",0]],["usize",0]],null,[[["",0]]],[[["str",0],["str",0]]],[[["",0],["globalsymbol",3]],["option",4,[["ordering",4]]]],[[["",0],["recexpr",3]],["option",4,[["ordering",4]]]],[[["",0],["symbollang",3]],["option",4,[["ordering",4]]]],[[["",0],["enodeorvar",4]],["option",4,[["ordering",4]]]],[[["",0],["var",3]],["option",4,[["ordering",4]]]],[[["",0],["subst",3]],["option",4,[["ordering",4]]]],[[["",0],["id",3]],["option",4,[["ordering",4]]]],[[["egraph",3],["id",3],["id",3],["option",4]]],[[["egraph",3],["id",3],["id",3],["option",4]]],[[["",0],["usize",0]],["string",3]],[[["",0],["usize",0]],["string",3]],[[["",0]]],[[["",0]],["usize",0]],null,null,null,[[["",0]],["flatterm",3]],[[["",0]],["report",3]],[[["",0],["patternast",6],["patternast",6]],["flatterm",3]],null,null,[[["usize",0]]],[[["usize",0]]],[[["",0]],["result",6]],[[]],[[["",0]],["result",6]],[[["",0],["egraph",3]],["vec",3,[["searchmatches",3]]]],[[["",0],["egraph",3]],["vec",3,[["searchmatches",3]]]],[[["",0],["egraph",3]],["vec",3,[["searchmatches",3]]]],[[["",0],["egraph",3],["id",3]],["option",4,[["searchmatches",3]]]],[[["",0],["egraph",3],["id",3]],["option",4,[["searchmatches",3]]]],[[["",0],["egraph",3],["id",3],["usize",0]],["option",4,[["searchmatches",3]]]],[[["",0],["egraph",3],["id",3],["usize",0]],["option",4,[["searchmatches",3]]]],[[["",0],["egraph",3],["id",3],["usize",0]],["option",4,[["searchmatches",3]]]],[[["",0],["usize",0],["egraph",3],["rewrite",3]],["vec",3,[["searchmatches",3]]]],[[["",0],["usize",0],["egraph",3],["rewrite",3]],["vec",3,[["searchmatches",3]]]],[[["",0],["usize",0],["egraph",3],["rewrite",3]],["vec",3,[["searchmatches",3]]]],null,null,[[["",0],["egraph",3],["usize",0]],["vec",3,[["searchmatches",3]]]],[[["",0],["egraph",3],["usize",0]],["vec",3,[["searchmatches",3]]]],[[["",0],["egraph",3],["usize",0]],["vec",3,[["searchmatches",3]]]],[[["",0],["egraph",3],["usize",0]],["vec",3,[["searchmatches",3]]]],null,[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0],["id",3]]],[[["",0],["id",3]],["recexpr",3]],[[["",0]]],[[["",0]],["option",4,[["error",8]]]],[[["",0]],["option",4,[["error",8]]]],null,null,null,null,null,[[["",0],["f64",0]],["",0]],[[["",0]],["result",6]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["result",6]],[[["",0]],["result",6]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["result",6]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],null,null,[[["",0]],["result",4,[["recexpr",3]]]],[[["",0]],["result",4,[["recexpr",3]]]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["pattern",3]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0],["id",3],["id",3]],["bool",0]],[[["",0],["patternast",6],["patternast",6],["subst",3]]],[[["",0],["id",3],["id",3]],["bool",0]],[[["",0],["fnmut",8]]],[[["",0],["fnmut",8]]],null,[[["",0]],["vec",3,[["var",3]]]],[[["",0]],["vec",3,[["var",3]]]],[[["",0]],["vec",3,[["var",3]]]],[[["",0]],["vec",3,[["var",3]]]],[[["",0]],["vec",3,[["var",3]]]],[[["",0]],["vec",3,[["var",3]]]],[[["",0]],["vec",3,[["var",3]]]],[[["",0]],["vec",3,[["var",3]]]],[[["",0]],["vec",3,[["var",3]]]],[[["",0]],["vec",3,[["var",3]]]],[[["",0]],["vec",3,[["var",3]]]],[[["",0]],["vec",3,[["var",3]]]],[[["bool",0]]],[[["usize",0]]],[[["usize",0]]],[[]],[[["egraph",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["recexpr",3]]],[[]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[]],[[["duration",3]]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"p":[[3,"DidMerge"],[4,"RecExprParseError"],[4,"Justification"],[8,"CostFunction"],[8,"Analysis"],[4,"ENodeOrVar"],[8,"FromOp"],[4,"StopReason"],[4,"MultiPatternParseError"],[3,"EGraph"],[3,"RecExpr"],[8,"Language"],[6,"PatternAst"],[3,"Iteration"],[3,"Rewrite"],[3,"ConditionalApplier"],[8,"Applier"],[3,"MultiPattern"],[3,"Pattern"],[8,"RewriteScheduler"],[3,"Report"],[8,"LanguageChildren"],[3,"Id"],[3,"Symbol"],[3,"EClass"],[3,"SearchMatches"],[3,"TreeTerm"],[3,"FlatTerm"],[3,"Dot"],[3,"Explanation"],[3,"LpExtractor"],[3,"Runner"],[3,"Extractor"],[3,"AstSize"],[3,"AstDepth"],[3,"FromOpError"],[3,"SymbolLang"],[3,"ConditionEqual"],[3,"SimpleScheduler"],[3,"BackoffScheduler"],[3,"Var"],[3,"Subst"],[8,"Condition"],[8,"Searcher"],[8,"IterationData"],[8,"LpCostFunction"],[13,"ENode"],[13,"Var"],[13,"Rule"],[13,"PatternParseError"],[13,"PatternAssignmentError"],[13,"VariableError"],[13,"HeadList"],[13,"BadOp"],[13,"BadSexp"],[13,"IterationLimit"],[13,"NodeLimit"],[13,"TimeLimit"],[13,"Other"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};